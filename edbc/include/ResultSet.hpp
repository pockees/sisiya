/*
    Copyright (C) 2005  Erdal Mutlu

    This program is free software; you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation; either version 2 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program; if not, write to the Free Software
    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
*/

#ifndef _ResultSet_header_
#define _ResultSet_header_

#include<iostream>
#include"ResultSetMetaData.hpp"
#include"Statement.hpp"

class Statement; // forward class decleration

//! ResultSet class.
/*!
A table of data representing a database result set, which is usually generated by executing a statement that queries the database.
A ResultSet object maintains a cursor pointing to its current row of data. Initially the cursor is positioned before the first row. The next method moves the cursor to the next row, and because it returns false  when there are no more rows in the ResultSet object, it can be used in a while loop to iterate through the result set.
*/
class ResultSet {
	public:
		//! Default constructor.
		ResultSet()
#ifdef DEBUG
 { std::cout << "ResultSet::Constructor: Constructing a ResultSet object: " << this << std::endl; }
#else
{};
#endif
		//! Destructor.
		virtual ~ResultSet()
#ifdef DEBUG
 { std::cout << "ResultSet::Destructor: destructing a ResultSet object: " << this << std::endl; }
#else
{};
#endif
		//! Moves the cursor to the front of this ResultSet object, just before the first row.
		/*!
		This method has no effect if the result set contains no rows.
		*/
		virtual void beforeFirst(void)=0;
		//! Maps the given ResultSet column name to its ResultSet column index.
		/*!
		\param columnName - the name of the column.
		\return the column index of the specified column name. The column index starts at 0 and goes to columnCount-1
		\throw SQLException is thrown if the ResultSet object does not contain columnName or a database
		access error occurs.
		\sa next()
		*/
		//! Maps the given ResultSet column name to its ResultSet column index.
		/*!
		\param columnName - the name of the column.
		\return the column index of the given column name. Column index starts from 0 and goes to columnCount-1.
		\throw SQLException is thrown if the ResultSet object does not contain columnName or a database access
		error occurs.
		*/
		virtual int findColumn(const string columnName)=0;
		//! Moves the cursor to the first row in this ResultSet object.
		/*!
		\return true if the cursor is on a valid row; false if there are no rows in the result set.
		\throw SQLException is thrown if a database access error occurs.
		*/
		virtual bool first(void)=0;
		//! Retrieves the value of the designated column in the current row of this ResultSet object as a bool.
		/*!
		\return the column value; if the value is SQL NULL, the value returned is false.
		\throw SQLException is thrown if a database access error occurs.
		*/
		//! Returns column value as a boolean.
		virtual bool getBoolean(const string columnName)=0;
		//! Returns column value as a boolean.
		virtual bool getBoolean(int columnIndex)=0;
		//! Returns column value as a double.
		virtual double getDouble(const string columnName)=0;
		//! Returns column value as a double.
		virtual double getDouble(int columnIndex)=0;
//		virtual const string getChar(string columnName)=0;
//		virtual const string getChar(int columnIndex)=0;
		//! Returns column value as a float.
		virtual float getFloat(const string columnName)=0;
		//! Returns column value as a float.
		virtual float getFloat(int columnIndex)=0;
		//! Returns column value as a int.
		virtual int getInt(const string columnName)=0;
		//! Returns column value as a int.
		virtual int getInt(int columnIndex)=0;
		//! Returns column value as a long.
		virtual long int getLong(const string columnName)=0;
		//! Returns column value as a long.
		virtual long int getLong(int columnIndex)=0;
		//! Returns ResultSetMetaDate object.
		virtual ResultSetMetaData *getResultSetMetaData(void)=0;
		//! Returns current row number. 
		virtual long int getRow(void)=0;
		//! Returns column value as a short.
		virtual short int getShort(const string columnName)=0;
		//! Returns column value as a short.
		virtual short int getShort(int columnIndex)=0;
		//! Returns Statement object.
		virtual Statement *getStatement(void)=0;
		//! Returns column value as a String object.
		virtual string getString(const string columnName)=0;
		//! Returns value as a String object.
		virtual string getString(int columnIndex)=0;
		//! Position to the next row.
		virtual bool next(void)=0;
};
#endif 
