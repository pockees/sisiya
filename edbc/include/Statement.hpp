/*
    Copyright (C) 2005  Erdal Mutlu

    This program is free software; you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation; either version 2 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program; if not, write to the Free Software
    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
*/

#ifndef _Statement_header_
#define _Statement_header_

#include<iostream>
#include"Connection.hpp"

class Connection; // forward class decleration
class ResultSet; // forward class decleration

using namespace std;

//! Statement class.
/*!
The object used for executing a static SQL statement and returning the results it produces.

By default, only one ResultSet object per Statement object can be open at the same time.
Therefore, if the reading of one ResultSet object is interleaved with the reading of another,
each must have been generated by different Statement objects.
*/
class Statement {
	public:
		//! Default constructor.
		Statement() 
#ifdef DEBUG
{ cout << "Statement::Constructor: Constructing a Statement object: " << this << endl; }
#else
{};
#endif
		//! Destructor.
		virtual ~Statement() 
#ifdef DEBUG
{ cout << "Statement::Destructor: destructing a Statement object: " << this << endl; }
#else
{};
#endif
		//! Executes the statement.
		virtual bool execute(const string sql)=0;
		//! Executes query.
		virtual ResultSet *executeQuery(const string sql)=0;
		//! Executes insert/update/delete
		virtual int executeUpdate(const string sql)=0;
		//! Returns the connection object. 
		virtual Connection *getConnection(void)=0;
		//! Returns result set object.
		virtual ResultSet *getResultSet(void)=0;
		//! Returns update count.
		virtual int getUpdateCount(void)=0;
};

#endif 
