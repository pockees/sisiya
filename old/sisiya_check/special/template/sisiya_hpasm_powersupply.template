#################################################################################
### Check for powersupplies
#################################################################################
### service id
serviceid=$serviceid_powersupply
if test -z "$serviceid" ; then
	echo "$0 : serviceid_powersupply is not defined! Exiting..."
	exit 1
fi

##########################################################################
service_name="Powersupply"
##########################################################################

#######################################################################################
#######################################################################################
### This script uses the hp-health tools (hpasmcli) for checking various HP serevers'
### components, such as temperature, fans etc.
#######################################################################################
#######################################################################################
### HP management CLI for Linux
### default values
hpasmcli_prog=/sbin/hpasmcli
### end of the default values
##########################################################################
### If there is a module conf file then override these default values
if test -f $module_conf_file ; then
	source $module_conf_file
fi


##############################################################################################
### Sample output of the hpasmcli -s "show powersupply" command :
#Power supply #1
#        Present  : Yes
#        Redundant: Yes
#        Condition: Ok
#        Hotplug  : Supported
#Power supply #2
#        Present  : Yes
#        Redundant: Yes
#        Condition: Ok
#        Hotplug  : Supported
##############################################################################################

tmp_file=`maketemp /tmp/tmp_${script_name}.XXXXXX`
tmp_ok_file=`maketemp /tmp/tmp_ok_${script_name}.XXXXXX`
tmp_error_file=`maketemp /tmp/tmp_error_${script_name}.XXXXXX`

declare -i i=1

cmd_str="show powermeter"
str=`$hpasmcli_prog -s "$cmd_str" | grep "Power Reading" | tr -d " "|tr -d "\t" | cut -d ":" -f 2`
retcode=$?
if test $retcode -eq 0 ; then
	echo "OK: The current power reading is $str Watts." >> $tmp_ok_file
else
	echo "ERROR: Error executing show powermeter command! retcode=$retcode" >> $tmp_error_file
fi

cmd_str="show powersupply"
$hpasmcli_prog -s "$cmd_str" | grep "Condition" | tr -d " "|tr -d "\t" | cut -d ":" -f 2 > $tmp_file
retcode=$?
if test $retcode -eq 0 ; then
	n=`cat $tmp_file | wc -l`
	while test $i -le $n
	do
		status_str=`head --lines=$i $tmp_file | tail --lines=1`
		if test "$status_str" != "Ok" ; then
			echo "ERROR: The condition of powersupply $i is not Ok (${status_str})!" >> $tmp_error_file
		else
			echo "OK: The condition of powersupply $i is Ok." >> $tmp_ok_file
		fi 
		i=i+1
	done
else
	echo "ERROR: Error executing show powersupply command! retcode=$retcode" >> $tmp_error_file
fi

statusid=$status_ok
message_str=""
if test -s $tmp_error_file ; then
	statusid=$status_error
	message_str=`cat $tmp_error_file | tr "\n" " "` 
fi

if test -s $tmp_ok_file ; then
	message_str="$message_str`cat $tmp_ok_file | tr "\n" " "`"
fi

### clean up
for f in $tmp_file $tmp_ok_file $tmp_error_file
do
	rm -f $f
done
