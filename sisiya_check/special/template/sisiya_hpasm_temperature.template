#################################################################################
### Check for temperature
#################################################################################
### service id
serviceid=$serviceid_temperature  
if test -z "$serviceid" ; then
	echo "$0 : serviceid_temperature is not defined! Exiting..."
	exit 1
fi

##########################################################################
service_name="Temperature"
##########################################################################

#######################################################################################
#######################################################################################
### This script uses the hp-health tools (hpasmcli) for checking various HP serevers'
### components, such as temperature, fans etc.
#######################################################################################
#######################################################################################
### HP management CLI for Linux
### default values
hpasmcli_prog=/sbin/hpasmcli
#######################################################################################
### for temperature sensors
### If you do not specify your own limits for temperature, then the program is going to retriev the limits form ILO2 module
tsensors_error[0]=50
tsensors_warning[0]=45
tsensors_error[1]=25
tsensors_warning[1]=20
tsensors_error[2]=48
tsensors_warning[2]=45
tsensors_error[3]=48
tsensors_warning[3]=45
tsensors_error[4]=50
tsensors_warning[4]=48
tsensors_error[5]=48
tsensors_warning[5]=45
tsensors_error[6]=48
tsensors_warning[6]=45
### end of the default values
##########################################################################
### If there is a module conf file then override these default values
if test -f $module_conf_file ; then
	source $module_conf_file
fi
##########################################################################
### Sample output of the hpasmcli -s "show temp" command :
#	Sensor   Location              Temp       Threshold
#	------   --------              ----       ---------
#	#1        I/O_ZONE             40C/104F   70C/158F
#	#2        AMBIENT              17C/62F    39C/102F
#	#3        CPU#1                30C/86F    127C/260F
#	#4        CPU#1                30C/86F    127C/260F
#	#5        POWER_SUPPLY_BAY     43C/109F   77C/170F
#	#6        CPU#2                30C/86F    127C/260F
#	#7        CPU#2                30C/86F    127C/260F
#
##########################################################################
#	Sensor   Location              Temp       Threshold
#	------   --------              ----       ---------
#	#1        AMBIENT              27C/80F    40C/104F
#	#2        MEMORY_BD            53C/127F   110C/230F
#	#3        CPU#1                30C/86F    100C/212F
#	#4        CPU#1                30C/86F    100C/212F
#	#5        I/O_ZONE             48C/118F   63C/145F
#	#6        CPU#2                 -         100C/212F
#	#7        CPU#2                 -         100C/212F
##########################################################################

tmp_file=`maketemp /tmp/tmp_${script_name}.XXXXXX`
tmp_ok_file=`maketemp /tmp/tmp_ok_${script_name}.XXXXXX`
tmp_warning_file=`maketemp /tmp/tmp_warning_${script_name}.XXXXXX`
tmp_error_file=`maketemp /tmp/tmp_error_${script_name}.XXXXXX`

declare -i i=0 j

cmd_str="show temp"
$hpasmcli_prog -s "$cmd_str" | grep "^#" > $tmp_file
retcode=$?

if test $retcode -eq 0 ; then
	i=0
	cat $tmp_file | while read line
	do
		str=`echo $line | awk '{print $3}'`
		if test "$str" = "-" ; then
			i=i+1
			continue
		fi
		tsensor_value=`echo $line	| awk '{print $3}' | cut -d "/" -f 1 | cut -d "C" -f 1`
		tsensor_name=`echo $line	| awk '{print $2}'`
		tsensor_number=`echo $line	| awk '{print $1}'`
		tsensor_error=${tsensors_error[${i}]}
		tsensor_warning=${tsensors_warning[${i}]}
		#echo "tsensor_name=$tsensor_name tsensor_number=$tsensor_number tsensor_error=$tsensor_error tsensor_warning=$tsensor_warning tsensor_value=[$tsensor_value]"
		if test -n "$tsensor_error" && test -n "$tsensor_warning" ; then
			### check agints the given limits
			if test $tsensor_value -ge $tsensor_error ; then
				echo "ERROR: The temperature for the $tsensor_number $tsensor_name sensor is ${tsensor_value} (>= ${tsensor_error}) Grad Celcius!" >> $tmp_error_file
			elif test $tsensor_value -ge $tsensor_warning ; then
				echo "WARNING: The temperature for the $tsensor_number $tsensor_name sensor is ${tsensor_value} (>= ${tsensor_warning}) Grad Celcius!" >> $tmp_warning_file
			else
				echo "OK: The temperature for the $tsensor_number $tsensor_name sensor is ${tsensor_value} Grad Celcius." >> $tmp_ok_file
			fi
		else
			### check againts the specified limits in the ILO2 module
			tsensor_error=`echo $line	| awk '{print $4}' | cut -d "/" -f 1 | cut -d "C" -f 1`
			if test $tsensor_value -ge $tsensor_error ; then
				echo "ERROR: The temperature for the $tsensor_number $tsensor_name sensor is ${tsensor_value} (>= ${tsensor_error}) Grad Celcius!" >> $tmp_error_file
			else
				echo "OK: The temperature for the $tsensor_number $tsensor_name sensor is ${tsensor_value} Grad Celcius." >> $tmp_ok_file
			fi
		fi
		i=i+1
	done
fi

statusid=$status_ok
message_str=""
if test -s $tmp_error_file ; then
	statusid=$status_error
	message_str=`cat $tmp_error_file | tr "\n" " "` 
fi
if test -s $tmp_warning_file ; then
	message_str="$message_str`cat $tmp_warning_file | tr "\n" " "`" 
	if test $statusid -lt $status_warning ; then
		statusid=$status_warning
	fi 
fi
if test -s $tmp_ok_file ; then
	message_str="$message_str`cat $tmp_ok_file | tr "\n" " "`"
fi

### clean up
for f in $tmp_file $tmp_ok_file $tmp_warning_file $tmp_error_file
do
	rm -f $f
done
