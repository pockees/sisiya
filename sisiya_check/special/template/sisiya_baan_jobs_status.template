#######################################################################################
### service id
serviceid=$serviceid_baan_jobs_status
if test -z "$serviceid" ; then
	echo "$0 : serviceid_baan_jobs_status is not defined! Exiting..."
	exit 1
fi
##########################################################################
### default values
### Oracle definitions
dbuser=system
dbpassword=manager
PATH=$PATH:/apps/oracle/product/10.2.0/db_1/bin
ORACLE_SID=BAAN 
tablespace_name=baan
ORACLE_HOME=/apps/oracle/product/10.2.0/db_1
NLS_LANG=american_america.WE8ISO8859P9 
NLS_NUMERIC_CHARACTERS=., 
### Baan definitions
baan_companyid=715
### end of the default values
##########################################################################

### If there is a module conf file then override these default values
if test -f $module_conf_file ; then
	source $module_conf_file
fi

PATH=$PATH:$ORACLE_BIN
export PATH ORACLE_HOME ORACLE_SID NLS_LANG NLS_NUMERIC_CHARACTERS 

db_name=$ORACLE_SID

sql_file=`maketemp /tmp/${script_name}_sql.XXXXXX`
rm -f $sql_file

echo "SET LINESIZE 2000"	> $sql_file
echo "set colsep \"|\""		>> $sql_file
echo "set heading off"		>> $sql_file
echo "set newpage none"		>> $sql_file
echo "set numwidth 16"		>> $sql_file
echo "SET FEEDBACK OFF"		>> $sql_file
echo "select t\$cjob,t\$jsta,t\$desc,to_char(t\$edte,'DD.MM.YYYY HH:MI:SS'),to_char(t\$ldat,'DD.MM.YYYY HH:MI:SS') from ${tablespace_name}.tttaad500${baan_companyid};" >> $sql_file
echo "exit" >> $sql_file

#cat $sql_file


sql_output_file=`maketemp /tmp/tmp_output_${script_name}.XXXXXX`

sqlplus -S ${dbuser}/${dbpassword}@${db_name} @$sql_file  > $sql_output_file
rm -f $sql_file

tmp_ok_file=`maketemp /tmp/tmp_ok_${script_name}.XXXXXX`
tmp_warning_file=`maketemp /tmp/tmp_warning_${script_name}.XXXXXX`
tmp_error_file=`maketemp /tmp/tmp_error_${script_name}.XXXXXX`

cat $sql_output_file | while read line
do
	#echo "line=[$line]"
	job=`echo $line			| cut -d "|" -f 1`
	job_status=`echo $line		| cut -d "|" -f 2 | cut -d " " -f 2`
	job_name=`echo $line		| cut -d "|" -f 3`
	next_execution_date=`echo $line	| cut -d "|" -f 4`
	last_execution_date=`echo $line	| cut -d "|" -f 5`
	job_str="$job ($job_name, last execution date $last_execution_date, next execution date $next_execution_date"
	case $job_status in
		"1")
			echo "OK: $job_str is free." 				>> $tmp_ok_file
			;;
		"2")
			echo "OK: $job_str is waiting." 			>> $tmp_ok_file
			;;
		"3")
			echo "OK: $job_str is running." 			>> $tmp_ok_file
			;;
		"4")
			echo "WARNING: $job_str is canceled."			>> $tmp_warning_file
			;;
		"5")
			echo "ERROR: $job_str has got runtime error!" 		>> $tmp_error_file
			;;
		"6")
			echo "OK: $job_str is in queue." 			>> $tmp_ok_file
			;;
		"7")
			echo "ERROR: $job_str is blocked!" 			>> $tmp_error_file
			;;
		*)
			echo "ERROR: $job_str has unknown status=$job_status!" 	>> $tmp_error_file
			;;
	esac
	#echo "job=[$job] job_status=[$job_status]"
done
	
statusid=$status_ok
message_str=""
if test -s $tmp_error_file ; then
	message_str=`cat $tmp_error_file | tr -s "\n" " "` 
	statusid=$status_error
fi

if test -s $tmp_warning_file ; then
	message_str="$message_str`cat $tmp_warning_file | tr -s "\n" " "`" 
	if test $statusid -lt $status_warning ; then
		statusid=$status_warning
	fi 
fi

if test -s $tmp_ok_file ; then
	message_str="$message_str`cat $tmp_ok_file | tr -s "\n" " "`"
fi

for f in $sql_output_file $tmp_ok_file $tmp_warning_file $tmp_error_file
do
	rm -f $f
done
